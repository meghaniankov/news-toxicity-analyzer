{"id":"node_modules/@tensorflow/tfjs-core/dist/backends/webgl/tex_util.js","dependencies":[{"name":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/node_modules/@tensorflow/tfjs-core/dist/backends/webgl/tex_util.js.map","includedInParent":true,"mtime":1582236257635},{"name":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/node_modules/@tensorflow/tfjs-core/src/backends/webgl/tex_util.ts","includedInParent":true,"mtime":1582236257635},{"name":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/package.json","includedInParent":true,"mtime":1582277560449},{"name":"/Users/meghanmccue/.browserslistrc","includedInParent":true,"mtime":1581419732845},{"name":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1582236257635},{"name":"../../environment","loc":{"line":19,"column":28},"parent":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/node_modules/@tensorflow/tfjs-core/dist/backends/webgl/tex_util.js","resolved":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/node_modules/@tensorflow/tfjs-core/dist/environment.js"},{"name":"../../util","loc":{"line":20,"column":19},"parent":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/node_modules/@tensorflow/tfjs-core/dist/backends/webgl/tex_util.js","resolved":"/Users/meghanmccue/projects/tensorflow-test/news-toxicity/node_modules/@tensorflow/tfjs-core/dist/util.js"}],"generated":{"js":"\"use strict\";\n/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../../environment\");\nvar util = require(\"../../util\");\nvar PackingScheme;\n(function (PackingScheme) {\n    /**\n     * All values in a single texel are densely packed without any constraints.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 4]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   010|011   020|021\n     * -------   -------   -------\n     * 002|003   012|013   022|023\n     *\n     * 100|101   110|111   120|121\n     * -------   -------   -------\n     * 102|103   112|113   122|123\n     *\n     */\n    PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n    /**\n     * Single texels contain only values from the same batch, and from adjacent\n     * rows and columns.\n     *\n     * This is how the shader encodes a tensor with shape = [2, 3, 5]\n     * (indices are [batch, row, col]).\n     *\n     * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n     * -------   -------   -------   -------   -------   -------\n     * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n     *\n     */\n    PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme = exports.PackingScheme || (exports.PackingScheme = {}));\nvar TextureUsage;\n(function (TextureUsage) {\n    TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n    TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n    TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n    TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage = exports.TextureUsage || (exports.TextureUsage = {}));\nvar PhysicalTextureType;\n(function (PhysicalTextureType) {\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n    PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n    PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType = exports.PhysicalTextureType || (exports.PhysicalTextureType = {}));\nfunction getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;\nfunction getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;\nfunction getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\nexports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;\n/**\n * Get shape for densely packed RGBA texture.\n */\nfunction getDenseTexShape(shape) {\n    var size = util.sizeFromShape(shape);\n    var texelsNeeded = Math.ceil(size / 4);\n    return util.sizeToSquarishShape(texelsNeeded);\n}\nexports.getDenseTexShape = getDenseTexShape;\nfunction getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(\"unpackedSize (\" + unpackedSize + \") must be a multiple of \" +\n            (\"\" + channelsPerTexture));\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;\nfunction decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    var requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n    }\n    var dst = 0;\n    for (var src = 0; src < unpackedArray.length; src += 4) {\n        for (var c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexports.decodeMatrixFromUnpackedColorRGBAArray = decodeMatrixFromUnpackedColorRGBAArray;\nfunction getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [\n        Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n    ];\n}\nexports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;\nfunction getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\n    return w * h * 4;\n}\nexports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;\nfunction getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n    // tslint:disable-next-line:no-any\n    var glany = gl;\n    var internalFormatFloat;\n    var internalFormatHalfFloat;\n    var internalFormatPackedHalfFloat;\n    var internalFormatPackedFloat;\n    var textureFormatFloat;\n    var downloadTextureFormat;\n    var downloadUnpackNumChannels;\n    var defaultNumChannels;\n    var textureTypeHalfFloat;\n    var textureTypeFloat;\n    if (environment_1.env().getNumber('WEBGL_VERSION') === 2) {\n        internalFormatFloat = glany.R32F;\n        internalFormatHalfFloat = glany.R16F;\n        internalFormatPackedHalfFloat = glany.RGBA16F;\n        internalFormatPackedFloat = glany.RGBA32F;\n        textureFormatFloat = glany.RED;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 1;\n        textureTypeHalfFloat = glany.HALF_FLOAT;\n        textureTypeFloat = glany.FLOAT;\n    }\n    else {\n        internalFormatFloat = gl.RGBA;\n        internalFormatHalfFloat = gl.RGBA;\n        internalFormatPackedHalfFloat = gl.RGBA;\n        internalFormatPackedFloat = glany.RGBA;\n        textureFormatFloat = gl.RGBA;\n        downloadUnpackNumChannels = 4;\n        defaultNumChannels = 4;\n        textureTypeHalfFloat = textureHalfFloatExtension != null ?\n            textureHalfFloatExtension.HALF_FLOAT_OES :\n            null;\n        textureTypeFloat = gl.FLOAT;\n    }\n    downloadTextureFormat = gl.RGBA;\n    return {\n        internalFormatFloat: internalFormatFloat,\n        internalFormatHalfFloat: internalFormatHalfFloat,\n        internalFormatPackedHalfFloat: internalFormatPackedHalfFloat,\n        internalFormatPackedFloat: internalFormatPackedFloat,\n        textureFormatFloat: textureFormatFloat,\n        downloadTextureFormat: downloadTextureFormat,\n        downloadUnpackNumChannels: downloadUnpackNumChannels,\n        defaultNumChannels: defaultNumChannels,\n        textureTypeHalfFloat: textureTypeHalfFloat,\n        textureTypeFloat: textureTypeFloat\n    };\n}\nexports.getTextureConfig = getTextureConfig;\n"},"sourceMaps":{"js":{"version":3,"file":"tex_util.js","sourceRoot":"","sources":["../../../src/backends/webgl/tex_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../../environment';\n\nimport {DataId, Tensor} from '../../tensor';\nimport {BackendValues, DataType} from '../../types';\nimport * as util from '../../util';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n"]}},"error":null,"hash":"711a5e578b384b3d77c79edbfef00087","cacheData":{"env":{}}}